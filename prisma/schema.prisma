// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  turnkeyUserId  String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  devices        Device[]
  DeviceIdentity DeviceIdentity[]
}

enum DeviceOS {
  ios
  android
  web
  macos
}

model Device {
  id         String               @id @default(uuid())
  userId     String
  name       String?
  os         DeviceOS
  pushToken  String?
  expoToken  String?
  appVersion String?
  appBuildNumber String?
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade) // If a User is deleted, their associated Devices are also deleted as they cannot exist without a user.
  identities IdentitiesOnDevice[]
}

model DeviceIdentity {
  id                   String                 @id @default(uuid())
  userId               String
  xmtpId               String?
  turnkeyAddress       String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  profile              Profile?
  conversationMetadata ConversationMetadata[]
  devices              IdentitiesOnDevice[]
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade) // If a User is deleted, their DeviceIdentities are also deleted as they are user-specific.

  @@index([xmtpId])
  @@unique([userId, xmtpId])
}

model IdentitiesOnDevice {
  deviceId   String
  device     Device         @relation(fields: [deviceId], references: [id], onDelete: Cascade) // If a Device is deleted, the record linking it to an Identity is no longer valid and should be removed.
  identityId String
  identity   DeviceIdentity @relation(fields: [identityId], references: [id], onDelete: Cascade) // If a DeviceIdentity is deleted, its presence on any device is invalidated and should be removed.
  xmtpInstallationId String?    @unique

  @@id([deviceId, identityId])
}

model Profile {
  id               String         @id @default(uuid())
  deviceIdentityId String         @unique
  name             String
  username         String         @unique
  description      String?
  avatar           String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deviceIdentity   DeviceIdentity @relation(fields: [deviceIdentityId], references: [id], onDelete: Cascade) // A Profile is intrinsically linked to a DeviceIdentity; if the identity is gone, the profile is meaningless.
}

model ConversationMetadata {
  id               String         @id @default(uuid())
  deviceIdentityId String
  conversationId   String
  pinned           Boolean        @default(false)
  unread           Boolean        @default(false)
  deleted          Boolean        @default(false)
  muted            Boolean        @default(false)
  readUntil        DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deviceIdentity   DeviceIdentity @relation(fields: [deviceIdentityId], references: [id], onDelete: Cascade) // Conversation metadata is specific to a DeviceIdentity; if the identity is deleted, its metadata should also be removed.

  @@unique([deviceIdentityId, conversationId])
}

model SubOrg {
  id                   String   @id
  defaultWalletAddress String
  credentialId         String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
