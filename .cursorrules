# API Development Best Practices

## Type Safety and TypeScript Usage

- Use explicit types for request parameters, query parameters, and response bodies and use zod schemas for validation
- Define request types clearly (e.g., `GetProfileRequestParams`, `SearchProfilesQuery`)

## Request Validation

- Use Zod schema validation for request body validation
- Define schemas separately and reuse them (e.g., `profileCreateSchema`)
- Validate query parameters before processing (e.g., checking if search query is empty)
- Handle validation errors with appropriate error responses

## Route Documentation

- Single-line comments above each endpoint describing the HTTP method and purpose
- Format: `// [HTTP_METHOD] [ROUTE] - [Description]`
- Example: `// GET /profiles/:id - Get a single profile by ID`

## Error Handling

- Consistent error response structure
- Specific error messages for different scenarios
- Try-catch blocks around database operations
- Different error handling for validation vs. server errors

## Response Structure

- Consistent response formats
- Success responses include relevant data
- Error responses include `error` message
- Some endpoints use `success` boolean flag with messages

## Database Query Practices

- Use specific select clauses to limit returned fields
- Include related data when needed using `include`
- Use appropriate query filters

## Code Organization

- Group related routes together
- Define schemas and types at appropriate locations
- Separate route handling from business logic
- Export necessary types and router

## Parameter Validation

- Define a schema with zod for each route
- Validate the schema with zod
- Return a 400 Bad Request error if the schema is invalid

## Clean Code Principles

- Descriptive variable names
- Single responsibility for each route handler
- Consistent code formatting
- No duplicate code

## Security Practices

- Input validation before processing
- No exposed sensitive information
- Case-insensitive searches where appropriate
- Proper error handling without leaking internal details

## Optional Fields Handling

- Use of optional chaining where appropriate
- Proper typing of optional fields
- Validation of optional fields in schemas
- Default values where necessary

## API URL Best Practices

- Keep URLs terse and avoid redundancy
- Use route parameters when appropriate
- Avoid repeating terms in URL path and query parameters

✅ Good Examples:

- GET /profiles/validate?username=test
- GET /profiles/:id
- GET /profiles/user/:userId

❌ Bad Examples:

- GET /profiles/username/valid?username=test (redundant 'username')
- GET /profiles/get/by-id/:id (verbose)
- GET /profiles/user/get/all/:userId (overly verbose)
