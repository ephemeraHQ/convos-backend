name: Sync dev to main

on:
  workflow_dispatch: # Only manual triggering via GitHub UI

permissions:
  contents: write # Need write access to push to main
  actions: write # Need to trigger repository dispatch events

jobs:
  sync-branches:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for merge
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate branch
        run: |
          if [ "${{ github.ref_name }}" != "dev" ]; then
            echo "❌ This workflow must be run from the 'dev' branch only"
            echo "Current branch: ${{ github.ref_name }}"
            echo "Expected branch: dev"
            exit 1
          fi
          echo "✅ Running from correct branch: dev"

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Fetch both branches
        run: |
          git fetch origin main:main || git fetch origin main
          git fetch origin dev:dev || git fetch origin dev

      - name: Merge dev to main (prefer fast-forward)
        id: merge
        run: |
          git checkout main
          git pull origin main # Ensure we have latest main

          # Try fast-forward first, fall back to regular merge if needed
          if git merge --ff-only origin/dev 2>/dev/null; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "merge_type=fast-forward" >> $GITHUB_OUTPUT
            echo "✅ Fast-forward merge successful - clean linear history maintained"
          elif git merge origin/dev --no-edit; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "merge_type=merge-commit" >> $GITHUB_OUTPUT
            echo "✅ Merge successful with merge commit (main had diverged)"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ Merge failed due to conflicts"
            git merge --abort
          fi

      - name: Push successful merge
        if: steps.merge.outputs.success == 'true'
        run: |
          git push origin main
          echo "✅ Successfully synced main with dev" >> $GITHUB_STEP_SUMMARY
          echo "**Merge Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Merge commit: \`$(git log -1 --oneline)\`" >> $GITHUB_STEP_SUMMARY
          echo "- Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Trigger deployment workflow
        if: steps.merge.outputs.success == 'true'
        run: |
          # Get commit information for the payload
          commit_hash=$(git rev-parse HEAD)
          commit_message=$(git log -1 --pretty=format:"%s")

          # Create JSON payload with proper escaping
          payload=$(jq -n \
            --arg event_type "deploy-main" \
            --arg ref "main" \
            --arg triggered_by "sync-workflow" \
            --arg commit_hash "$commit_hash" \
            --arg commit_message "$commit_message" \
            '{
              event_type: $event_type,
              client_payload: {
                ref: $ref,
                triggered_by: $triggered_by,
                commit_hash: $commit_hash,
                commit_message: $commit_message
              }
            }')

          # Create temp files for response and status code
          response_file=$(mktemp)
          http_code_file=$(mktemp)

          # Make API call with proper separation of response body and status code
          if curl -sf -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            -o "$response_file" \
            -w "%{http_code}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d "$payload" \
            > "$http_code_file" 2>/dev/null; then

            http_code=$(cat "$http_code_file")
            response=$(cat "$response_file")

            # Clean up temp files
            rm -f "$response_file" "$http_code_file"

            if [ "$http_code" = "204" ]; then
              echo "✅ Successfully triggered deployment workflow"
              echo "**Deployment Info:**" >> $GITHUB_STEP_SUMMARY
              echo "- Commit: \`$commit_hash\`" >> $GITHUB_STEP_SUMMARY
              echo "- Message: $commit_message" >> $GITHUB_STEP_SUMMARY
              echo "- Target: Production (main branch)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Unexpected HTTP status code: $http_code"
              [ -n "$response" ] && echo "Response: $response"
              exit 1
            fi
          else
            # Clean up temp files on failure
            rm -f "$response_file" "$http_code_file"
            echo "❌ Failed to trigger deployment workflow - curl command failed"
            echo "This could be due to network issues, authentication problems, or API errors"
            exit 1
          fi

      - name: Report merge failure
        if: steps.merge.outputs.success == 'false'
        run: |
          echo "⚠️ **Merge failed due to conflicts**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**To resolve manually:**" >> $GITHUB_STEP_SUMMARY
          echo "1. \`git checkout main && git pull\`" >> $GITHUB_STEP_SUMMARY
          echo "2. \`git merge dev\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Resolve conflicts in your editor" >> $GITHUB_STEP_SUMMARY
          echo "4. \`git add . && git commit\`" >> $GITHUB_STEP_SUMMARY
          echo "5. \`git push origin main\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "After resolving conflicts, future syncs should work smoothly." >> $GITHUB_STEP_SUMMARY
          exit 1
